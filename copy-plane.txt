-----01_Procedimiento_de_envio_de_datos_por_el_protocolo_tcp/ip_-----

La transmición inicia con la entrega de datos por parte del cliente. 
Entonces los datos que se van a enviar se deviden por paquetes.
Por ejemplo tenemos el string " bla bla bla ", este se divide en bytes 
[108, 97, 32, 114, 97, ...] se divide en bytes. El protocolo tcp segmenta 
los datos de esta forma: 
paquete 1 tiene 30 bytes y le indica el puerto al cual va redireccionado. 

ejemplo:
paquete 1  ->   34 bytes al  19
paquete 2  ->   45 bytes a 39

y estos paquetes son nombrados secuencialmente para no perder el orden. 
Por lo tanto se necesitan 3 cosas el numero de secuencia, el puerto de origen 
y destino y el checksum ( para detectar errores )

ip se encarga de la entrega: 
cada paquete se mete dentro de un "paquete IP" con y dirección de origien de mi pc
y dirección de destino (www.blabla.com).

La transmisión se inicia por la y viajan por los routers· Algunos pueden llegar 
desordenados por eso es la importancia del número secuencial para poder enviar los datos 
y que no se pierda el orden de los datos para después poderlos juntar . 

El receptor recibe los bytes secuenciales los une en algo que llaman "buffer de reemsamblado"
recuerde que un buffer es una memoria temporal.

La confirmación de los datos que llegan deben ser anunciados por lo tanto el servidor 
genera algo llamado ACKs que son confirmacion de resivido al cliente para que el cliente 
siga enviendo los datos. 
Por ejemplo: "Recibi el byte 20 mandame el 21" 

En el caso de que al receptor no le llegue algún paquete faltante, el servidor le envia ACKs 
(mensajes de confirmación ) y este espera para reordenar el paquete en la secuencia que es.

Cuando el buffer tiene todos los bytes en orden y sin huecos, tcp se los pasa a la aplicación 
del servidor y el servidor vera el string completo o lo que se le haya enviado.



----- Procedimiento de empaquetamiento de datos por el protocolo tcp/ip ----- 

Por ejemplo yo voy a enviar el string "rasta como pollo y bal" 

0: 108 → l
1: 97 → a
2: 32 →
3: 114 → r
4: 97 → a
5: 116 → t
6: 97 → a
7: 32 →
8: 97 → a
9: 122 → z
10: 117 → u
11: 108 → l
12: 32 →
13: 115 → s
14: 101 → e
15: 32 →
16: 97 → a
17: 118 → v
18: 97 → a
19: 32 →
20: 97 → a
21: 32 →
22: 99 → c

y esto queda 
[108, 97, 32, 114, 97, 116, 97, 32, 97, 122, 117, 108, 
 32, 115, 101, 32, 97, 118, 97, 32, 97, 32, 99, 117, 
 108, 105, 97, 114, 32]

Esto se divide en segmentos: 
2. División en segmentos (MSS = 8)

TCP corta en bloques de hasta 8 bytes de datos:

Segmento 1 (Seq=0, 8 bytes)
[108, 97, 32, 114, 97, 116, 97, 32] → "la rata "
Source Port: 49152
Dest Port: 80

Segmento 2 (Seq=8, 8 bytes)
[97, 122, 117, 108, 32, 115, 101, 32] → "azul se "
Source Port: 49152
Dest Port: 80

Segmento 3 (Seq=16, 8 bytes)
[97, 118, 97, 32, 97, 32, 99, 117] → "ava a cu"
Source Port: 49152
Dest Port: 80

Segmento 4 (Seq=24, 5 bytes)
[108, 105, 97, 114, 32] → "liar "
Source Port: 49152
Dest Port: 80

Y aquí está lo interesante y lo logico de este cuento, existe un maximo de bytes para enviar 
que llaman MTU (Maximum transmission Unit) es decir los maximos bytes que se pueden enviar en 
cada conexión. 

Esta el MSS (Maximum Segment size) este es el maximo numero de bytes que se pueden enviar en cada 
segmento. 

Tambien está la ventana TCP (TCP windown o TCP Receive Window)  que es un mecanimos de control de flujo que tiene el protocolo TCP para poder asegurarse de que el emisor envie los datos que el receptor tiene capacidad de recibir o procesar en ese momento. 

ACK ya habiamos dicho que son los mensajes de confirmacion del receptor de los datos de entrega. 

Con todos estos datos y los headers el puerto de origen y el puerto de destino en el cual 
se va enviar la solicitud.

Finalmente una vez se hace en el acomplamiento de buffers se halla secuenciado y capturado 
por parte del receptos los datos, se halla hecho el sumcheck ( que es una suma para contar
los datos de envios con los datos recividos y si coinciden es porque todo saliio bien) la trasnmision se simplifica se une y el receptor ve el mensaje: 

Cliente (192.168.1.20:49152) -----------------------> Servidor (104.21.2.33:80)
   "la rata az"   Seq=0
   "ul se ava "   Seq=10
   "a culiar "    Seq=20







